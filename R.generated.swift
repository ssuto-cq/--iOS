//
// This is a generated file, do not edit!
// Generated by R.swift, see https://github.com/mac-cain13/R.swift
//

import Foundation
import Rswift
import UIKit

/// This `R` struct is generated and contains references to static resources.
struct R: Rswift.Validatable {
  fileprivate static let applicationLocale = hostingBundle.preferredLocalizations.first.flatMap(Locale.init) ?? Locale.current
  fileprivate static let hostingBundle = Bundle(for: R.Class.self)
  
  static func validate() throws {
    try intern.validate()
  }
  
  /// This `R.color` struct is generated, and contains static references to 0 color palettes.
  struct color {
    fileprivate init() {}
  }
  
  /// This `R.file` struct is generated, and contains static references to 8 files.
  struct file {
    /// Resource file `.swiftlint.yml`.
    static let swiftlintYml = Rswift.FileResource(bundle: R.hostingBundle, name: ".swiftlint", pathExtension: "yml")
    /// Resource file `Default-568h@2x.png`.
    static let default568h2xPng = Rswift.FileResource(bundle: R.hostingBundle, name: "Default-568h@2x", pathExtension: "png")
    /// Resource file `adventure.jpg`.
    static let adventureJpg = Rswift.FileResource(bundle: R.hostingBundle, name: "adventure", pathExtension: "jpg")
    /// Resource file `animal.jpg`.
    static let animalJpg = Rswift.FileResource(bundle: R.hostingBundle, name: "animal", pathExtension: "jpg")
    /// Resource file `azarasi.jpg`.
    static let azarasiJpg = Rswift.FileResource(bundle: R.hostingBundle, name: "azarasi", pathExtension: "jpg")
    /// Resource file `himatubusi.jpg`.
    static let himatubusiJpg = Rswift.FileResource(bundle: R.hostingBundle, name: "himatubusi", pathExtension: "jpg")
    /// Resource file `noimage.png`.
    static let noimagePng = Rswift.FileResource(bundle: R.hostingBundle, name: "noimage", pathExtension: "png")
    /// Resource file `waste.jpg`.
    static let wasteJpg = Rswift.FileResource(bundle: R.hostingBundle, name: "waste", pathExtension: "jpg")
    
    /// `bundle.url(forResource: ".swiftlint", withExtension: "yml")`
    static func swiftlintYml(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.swiftlintYml
      return fileResource.bundle.url(forResource: fileResource)
    }
    
    /// `bundle.url(forResource: "Default-568h@2x", withExtension: "png")`
    static func default568h2xPng(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.default568h2xPng
      return fileResource.bundle.url(forResource: fileResource)
    }
    
    /// `bundle.url(forResource: "adventure", withExtension: "jpg")`
    static func adventureJpg(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.adventureJpg
      return fileResource.bundle.url(forResource: fileResource)
    }
    
    /// `bundle.url(forResource: "animal", withExtension: "jpg")`
    static func animalJpg(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.animalJpg
      return fileResource.bundle.url(forResource: fileResource)
    }
    
    /// `bundle.url(forResource: "azarasi", withExtension: "jpg")`
    static func azarasiJpg(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.azarasiJpg
      return fileResource.bundle.url(forResource: fileResource)
    }
    
    /// `bundle.url(forResource: "himatubusi", withExtension: "jpg")`
    static func himatubusiJpg(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.himatubusiJpg
      return fileResource.bundle.url(forResource: fileResource)
    }
    
    /// `bundle.url(forResource: "noimage", withExtension: "png")`
    static func noimagePng(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.noimagePng
      return fileResource.bundle.url(forResource: fileResource)
    }
    
    /// `bundle.url(forResource: "waste", withExtension: "jpg")`
    static func wasteJpg(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.wasteJpg
      return fileResource.bundle.url(forResource: fileResource)
    }
    
    fileprivate init() {}
  }
  
  /// This `R.font` struct is generated, and contains static references to 0 fonts.
  struct font {
    fileprivate init() {}
  }
  
  /// This `R.image` struct is generated, and contains static references to 7 images.
  struct image {
    /// Image `Default-568h`.
    static let default568h = Rswift.ImageResource(bundle: R.hostingBundle, name: "Default-568h")
    /// Image `adventure.jpg`.
    static let adventureJpg = Rswift.ImageResource(bundle: R.hostingBundle, name: "adventure.jpg")
    /// Image `animal.jpg`.
    static let animalJpg = Rswift.ImageResource(bundle: R.hostingBundle, name: "animal.jpg")
    /// Image `azarasi.jpg`.
    static let azarasiJpg = Rswift.ImageResource(bundle: R.hostingBundle, name: "azarasi.jpg")
    /// Image `himatubusi.jpg`.
    static let himatubusiJpg = Rswift.ImageResource(bundle: R.hostingBundle, name: "himatubusi.jpg")
    /// Image `noimage`.
    static let noimage = Rswift.ImageResource(bundle: R.hostingBundle, name: "noimage")
    /// Image `waste.jpg`.
    static let wasteJpg = Rswift.ImageResource(bundle: R.hostingBundle, name: "waste.jpg")
    
    /// `UIImage(named: "Default-568h", bundle: ..., traitCollection: ...)`
    static func default568h(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.default568h, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "adventure.jpg", bundle: ..., traitCollection: ...)`
    static func adventureJpg(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.adventureJpg, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "animal.jpg", bundle: ..., traitCollection: ...)`
    static func animalJpg(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.animalJpg, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "azarasi.jpg", bundle: ..., traitCollection: ...)`
    static func azarasiJpg(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.azarasiJpg, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "himatubusi.jpg", bundle: ..., traitCollection: ...)`
    static func himatubusiJpg(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.himatubusiJpg, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "noimage", bundle: ..., traitCollection: ...)`
    static func noimage(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.noimage, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "waste.jpg", bundle: ..., traitCollection: ...)`
    static func wasteJpg(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.wasteJpg, compatibleWith: traitCollection)
    }
    
    fileprivate init() {}
  }
  
  /// This `R.nib` struct is generated, and contains static references to 0 nibs.
  struct nib {
    fileprivate init() {}
  }
  
  /// This `R.reuseIdentifier` struct is generated, and contains static references to 0 reuse identifiers.
  struct reuseIdentifier {
    fileprivate init() {}
  }
  
  /// This `R.segue` struct is generated, and contains static references to 0 view controllers.
  struct segue {
    fileprivate init() {}
  }
  
  /// This `R.storyboard` struct is generated, and contains static references to 0 storyboards.
  struct storyboard {
    fileprivate init() {}
  }
  
  /// This `R.string` struct is generated, and contains static references to 0 localization tables.
  struct string {
    fileprivate init() {}
  }
  
  fileprivate struct intern: Rswift.Validatable {
    fileprivate static func validate() throws {
      // There are no resources to validate
    }
    
    fileprivate init() {}
  }
  
  fileprivate class Class {}
  
  fileprivate init() {}
}

struct _R {
  struct nib {
    fileprivate init() {}
  }
  
  struct storyboard {
    fileprivate init() {}
  }
  
  fileprivate init() {}
}
